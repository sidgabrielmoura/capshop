// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  accounts      Account[]
  sessions      Session[]

  products      Product[]
  subscription  Subscription?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Product {
  id                String           @id @default(uuid())
  name              String
  description       String
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  images            Image[]
  generatedContent  GeneratedContent[]
}

model Image {
  id         String   @id @default(uuid())
  url        String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
}

model Plan {
  id          String   @id @default(uuid())
  name        String   @unique
  priceCents  Int
  features    String[]
  subscriptions Subscription[]
}

model Subscription {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  plan       Plan     @relation(fields: [planId], references: [id])
  planId     String
  isActive   Boolean  @default(true)
  startedAt  DateTime @default(now())
  endsAt     DateTime?
}

model GeneratedContent {
  id          String   @id @default(uuid())
  type        String   // "title" ou "description"
  content     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime @default(now())
}