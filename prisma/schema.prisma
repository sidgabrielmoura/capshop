generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  accounts      Account[]
  products      Product[]
  sessions      Session[]
  coins         Coins[]
  subscription  Subscription?
}

model Account {
  id                String   @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id               String             @id @default(uuid())
  name             String
  description      String
  price            Float              @default(0.0)
  originPrice      Float              @default(0.0)
  specifications   String[]           @default([])
  category         String             @default("")
  status           ProductStatus      @default(active)
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  generatedContent GeneratedContent[]
  images           Image[]
  user             User               @relation(fields: [userId], references: [id])
}

model Image {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @default("Free")
  priceCents    Int
  subscriptions Subscription[]
}

model Coins {
  id        String   @id @default(uuid())
  userId    String   @unique
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String    @unique
  planId    String
  isActive  Boolean   @default(true)
  startedAt DateTime  @default(now())
  endsAt    DateTime?
  plan      Plan      @relation(fields: [planId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model GeneratedContent {
  id        String   @id @default(uuid())
  type      String
  content   String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

enum ProductStatus {
  active
  draft
}